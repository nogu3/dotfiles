#!/bin/bash

# ヘルプメッセージ
show_help() {
    echo "Usage: $(basename "$0") [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --build     Build Docker container for Ruby development"
    echo "  --setup     Setup Docker container (requires dotfiles directory path)"
    echo "  --run       Run Docker container for Ruby development"
    echo "  --update    Update Ruby dependencies"
    echo "  --format    Format Ruby code using RuboCop auto-correct"
    echo "  --lint      Run RuboCop lint check"
    echo "  -h, --help  Show this help message"
}

# オプションが指定されていない場合
if [ $# -eq 0 ]; then
    show_help
    exit 1
fi

# オプション処理
while [ $# -gt 0 ]; do
    case "$1" in
        --build)
            if [ -z "$2" ]; then
                echo "Error: --setup requires a dotfiles directory path"
                echo "Usage: $0 --setup <dotfiles_path>"
                exit 1
            fi

            dotfiles_path="$2"
            if [ ! -d "$dotfiles_path" ]; then
                echo "Error: Directory $dotfiles_path does not exist"
                exit 1
            fi

            echo "Docker image not found. Building ruby-dev-tool image..."
            docker build -t ruby-dev-tool -f "$dotfiles_path/settings/docker/ruby-dev-tool/Dockerfile" .
            if [ $? -eq 0 ]; then
                echo "Successfully built ruby-dev-tool Docker image"
            else
                echo "Failed to build Docker image"
                exit 1
            fi

            shift 2
            ;;
        --run)
            # 現在のディレクトリ名からコンテナ名を生成
            container_name="ruby-dev-tool_$(basename "$(pwd)")"

            # コンテナの存在確認
            if docker ps -a --format '{{.Names}}' | grep -q "^${container_name}$"; then
                echo "${container_name} container already exists"
            else
                # 新規コンテナ作成と起動
                echo "Creating and starting new ${container_name} container..."
                docker run -d \
                    --rm \
                    --name "${container_name}" \
                    -v "$(pwd):/app" \
                    ruby-dev-tool
            fi

            shift
            ;;
        --stop)
            echo "Stop option selected (not implemented yet)"
            # TODO: implement update logic
            shift
            ;;
        --update)
            echo "Update option selected (not implemented yet)"
            # TODO: implement update logic
            shift
            ;;
        --lint)
            echo "Lint option selected (not implemented yet)"
            # TODO: implement lint logic
            shift
            ;;
        --format)
            echo "Format option selected (not implemented yet)"
            # TODO: implement format logic
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo "Error: Unknown option $1"
            show_help
            exit 1
            ;;
    esac
done

